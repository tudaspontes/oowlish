{"ast":null,"code":"var _jsxFileName = \"/Users/Felipe/Projetos/oowlish-test/oowlish-time-management/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { GlobalStyle } from \"./styles/global\";\nimport { Header } from './components/Header';\nimport { Dashboard } from \"./components/Dashboard\";\nimport { EntryTimeModal } from \"./components/Modal/EntryTimeModal\";\nimport { LaunchBreakModal } from \"./components/Modal/LaunchBreakModal\";\nimport { ExitTimeModal } from \"./components/Modal/ExitTimeModal\";\nimport { TimeTableProvider } from \"./TimeTableContext\";\nimport Modal from 'react-modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement('#root');\nexport function App() {\n  _s();\n\n  const [isNewInputTimeModalOpen, setIsNewInputTimeModalOpen] = useState(false);\n\n  function handleOpenNewInputTimeModal() {\n    setIsNewInputTimeModalOpen(true);\n  }\n\n  function handleCloseNewInputTimeModal() {\n    setIsNewInputTimeModalOpen(false);\n  }\n\n  const [IsLaunchBreakModal, setIsLaunchBreakModal] = useState(false);\n\n  function handleOpenLaunchBreakModal() {\n    setIsLaunchBreakModal(true);\n  }\n\n  function handleCloseLaunchBreakModal() {\n    setIsLaunchBreakModal(false);\n  }\n\n  const [IsExitTimeModal, setIsExitTimeModal] = useState(false);\n\n  function handleOpenExitTimeModal() {\n    setIsExitTimeModal(true);\n  }\n\n  function handleCloseExitTimeModal() {\n    setIsExitTimeModal(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(TimeTableProvider, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onOpenNewTimeInputModal: handleOpenNewInputTimeModal,\n      onLaunchBreakModal: handleOpenLaunchBreakModal,\n      onExitTimeModal: handleOpenExitTimeModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dashboard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GlobalStyle, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EntryTimeModal, {\n      isOpen: isNewInputTimeModalOpen,\n      onRequestClose: handleCloseNewInputTimeModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LaunchBreakModal, {\n      isOpen: IsLaunchBreakModal,\n      onRequestClose: handleCloseLaunchBreakModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ExitTimeModal, {\n      isOpen: IsExitTimeModal,\n      onRequestClose: handleCloseExitTimeModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"3eVTHnKvYjcw6sTCDWc5vHqPguk=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Felipe/Projetos/oowlish-test/oowlish-time-management/src/App.tsx"],"names":["useState","GlobalStyle","Header","Dashboard","EntryTimeModal","LaunchBreakModal","ExitTimeModal","TimeTableProvider","Modal","setAppElement","App","isNewInputTimeModalOpen","setIsNewInputTimeModalOpen","handleOpenNewInputTimeModal","handleCloseNewInputTimeModal","IsLaunchBreakModal","setIsLaunchBreakModal","handleOpenLaunchBreakModal","handleCloseLaunchBreakModal","IsExitTimeModal","setIsExitTimeModal","handleOpenExitTimeModal","handleCloseExitTimeModal"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,QAA4B,iBAA5B;AACA,SAASC,MAAT,QAAuB,qBAAvB;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SAASC,cAAT,QAA+B,mCAA/B;AACA,SAASC,gBAAT,QAAiC,qCAAjC;AACA,SAASC,aAAT,QAA8B,kCAA9B;AACA,SAASC,iBAAT,QAAkC,oBAAlC;AAEA,OAAOC,KAAP,MAAkB,aAAlB;;AAEAA,KAAK,CAACC,aAAN,CAAoB,OAApB;AAEA,OAAO,SAASC,GAAT,GAAe;AAAA;;AACpB,QAAM,CAACC,uBAAD,EAA0BC,0BAA1B,IAAwDZ,QAAQ,CAAC,KAAD,CAAtE;;AAEA,WAASa,2BAAT,GAAuC;AACrCD,IAAAA,0BAA0B,CAAC,IAAD,CAA1B;AACD;;AAED,WAASE,4BAAT,GAAwC;AACtCF,IAAAA,0BAA0B,CAAC,KAAD,CAA1B;AACD;;AAED,QAAM,CAACG,kBAAD,EAAqBC,qBAArB,IAA8ChB,QAAQ,CAAC,KAAD,CAA5D;;AAEA,WAASiB,0BAAT,GAAsC;AACpCD,IAAAA,qBAAqB,CAAC,IAAD,CAArB;AACD;;AAED,WAASE,2BAAT,GAAuC;AACrCF,IAAAA,qBAAqB,CAAC,KAAD,CAArB;AACD;;AAED,QAAM,CAACG,eAAD,EAAkBC,kBAAlB,IAAwCpB,QAAQ,CAAC,KAAD,CAAtD;;AAEA,WAASqB,uBAAT,GAAmC;AACjCD,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD;;AAED,WAASE,wBAAT,GAAoC;AAClCF,IAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACD;;AACD,sBACE,QAAC,iBAAD;AAAA,4BACE,QAAC,MAAD;AACE,MAAA,uBAAuB,EAAEP,2BAD3B;AAEE,MAAA,kBAAkB,EAAEI,0BAFtB;AAGE,MAAA,eAAe,EAAEI;AAHnB;AAAA;AAAA;AAAA;AAAA,YADF,eAME,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,YANF,eAOE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YAPF,eAQE,QAAC,cAAD;AACE,MAAA,MAAM,EAAEV,uBADV;AAEE,MAAA,cAAc,EAAEG;AAFlB;AAAA;AAAA;AAAA;AAAA,YARF,eAYE,QAAC,gBAAD;AACE,MAAA,MAAM,EAAEC,kBADV;AAEE,MAAA,cAAc,EAAEG;AAFlB;AAAA;AAAA;AAAA;AAAA,YAZF,eAgBE,QAAC,aAAD;AACE,MAAA,MAAM,EAAEC,eADV;AAEE,MAAA,cAAc,EAAEG;AAFlB;AAAA;AAAA;AAAA;AAAA,YAhBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD;;GArDeZ,G;;KAAAA,G","sourcesContent":["import { useState } from \"react\";\nimport { GlobalStyle } from \"./styles/global\";\nimport { Header } from './components/Header'\nimport { Dashboard } from \"./components/Dashboard\";\nimport { EntryTimeModal } from \"./components/Modal/EntryTimeModal\";\nimport { LaunchBreakModal } from \"./components/Modal/LaunchBreakModal\";\nimport { ExitTimeModal } from \"./components/Modal/ExitTimeModal\";\nimport { TimeTableProvider } from \"./TimeTableContext\";\n\nimport Modal from 'react-modal'\n\nModal.setAppElement('#root')\n\nexport function App() {\n  const [isNewInputTimeModalOpen, setIsNewInputTimeModalOpen] = useState(false);\n\n  function handleOpenNewInputTimeModal() {\n    setIsNewInputTimeModalOpen(true);\n  }\n\n  function handleCloseNewInputTimeModal() {\n    setIsNewInputTimeModalOpen(false);\n  }\n\n  const [IsLaunchBreakModal, setIsLaunchBreakModal] = useState(false);\n\n  function handleOpenLaunchBreakModal() {\n    setIsLaunchBreakModal(true)\n  }\n\n  function handleCloseLaunchBreakModal() {\n    setIsLaunchBreakModal(false)\n  }\n\n  const [IsExitTimeModal, setIsExitTimeModal] = useState(false);\n\n  function handleOpenExitTimeModal() {\n    setIsExitTimeModal(true)\n  }\n\n  function handleCloseExitTimeModal() {\n    setIsExitTimeModal(false)\n  }\n  return (\n    <TimeTableProvider>\n      <Header\n        onOpenNewTimeInputModal={handleOpenNewInputTimeModal}\n        onLaunchBreakModal={handleOpenLaunchBreakModal}\n        onExitTimeModal={handleOpenExitTimeModal}/>\n        \n      <Dashboard />\n      <GlobalStyle />\n      <EntryTimeModal\n        isOpen={isNewInputTimeModalOpen}\n        onRequestClose={handleCloseNewInputTimeModal}\n      />\n      <LaunchBreakModal \n        isOpen={IsLaunchBreakModal}\n        onRequestClose={handleCloseLaunchBreakModal}\n      />\n      <ExitTimeModal \n        isOpen={IsExitTimeModal}\n        onRequestClose={handleCloseExitTimeModal}\n      />\n    </TimeTableProvider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}